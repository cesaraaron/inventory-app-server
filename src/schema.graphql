# import Product, Sale, CartProductCreateInput, UserPermissions, Notifications, NotificationsCreateInput, NotificationsUpdateInput, Log, LogType, SaleSubscriptionPayload, ProductSubscriptionPayload, UserSubscriptionPayload, Service from "./generated/prisma.graphql"

type Query {
  me: User
  users: [User!]!
  products: [Product!]!
  sales: [Sale!]!
}

type Mutation {
  login(phoneNumber: String!, password: String!): AuthPayload!
  createProduct(name: String!, price: Float!, quantity: Int!): Product
  updateProduct(
    productId: String!
    name: String
    price: Float
    quantity: Int
  ): Product
  deleteProduct(productId: String!): Product
  createSale(cartProducts: [CartProductCreateInput!]!): Sale
  deleteSale(saleId: String!): Sale
  createUser(
    name: String!
    phoneNumber: String!
    password: String!
    notifications: NotificationsCreateInput
    permissions: [UserPermissions]
  ): User
  updateUser(
    userId: String!
    name: String
    phoneNumber: String
    password: String
    notifications: NotificationsUpdateInput
    permissions: [UserPermissions]
  ): User
  deleteUser(userId: String!): User
  createLog(message: String!, type: LogType!): Log
  saveDeviceToken(token: String!): User
  removeDeviceToken(token: String!): User
  # createService(name: String!, price: Float!): Service
  # updateService(serviceId: ID!, name: String, price: Float): Service
  # deleteService(serviceId: ID!): Service
}


type AuthPayload {
  token: String!
  user: User
}

type User {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  lastName: String
  phoneNumber: String!
  notifications: Notifications
  permissions: [UserPermissions!]!
  isAdmin: Boolean
  client: Client!
  sales: [Sale!]!
}

type Client {
  id: ID!
  name: String!
  lastName: String
  email: String
  phoneNumber: String!
  users: [User!]!
  products: [Product!]!
  sales: [Sale!]!
}

type Subscription {
  sale: SaleSubscriptionPayload
  user: UserSubscriptionPayload
  product: ProductSubscriptionPayload
}
